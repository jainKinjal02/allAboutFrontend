The event loop is a fundamental part of the JavaScript runtime environment, particularly important in Node.js and browsers. Its main function is to manage the asynchronous execution of code and ensure that non-blocking operations can be handled efficiently.

### **How the Event Loop Works:**

1. **Call Stack:**
    - Where synchronous code execution happens.
    - JavaScript functions are pushed onto and popped off this stack in a Last-In, First-Out (LIFO) manner.
2. **Callback Queue (or Task Queue):**
    - A queue where callbacks from asynchronous tasks (like setTimeout, I/O events) are stored once their operations are completed.
    - Tasks in this queue are picked up by the event loop for execution after the call stack becomes empty.
3. **Microtask Queue:**
    - A higher-priority queue specifically for promises (and other microtasks like **`MutationObserver`**).
    - Microtasks are given priority over the regular callback queue and are processed after every task, before any new task begins.
4. **Event Loop Execution:**
    - The event loop continuously checks the call stack.
    - When the call stack is empty, it picks up tasks from the microtask queue first, then the callback queue, and pushes them onto the call stack for execution.

### **Importance for Asynchronous Operations:**

- **Non-Blocking**: By using the event loop, JavaScript can handle long-running or delayed operations without blocking other code execution.
- **Concurrency**: Asynchronous callbacks provide a way to perform many tasks concurrently while avoiding the complexities of multithreading.


----------------
Ques. Can we custom define a way to consider event loop to take callbacks from callback queue instead of microtask queue ?
    
    ans: 
    
    The main difference between callbacks from **`setTimeout`**/DOM APIs and deferred functions revolves around their triggering conditions and usage contexts:
    
    1. **Callbacks from `setTimeout`/DOM APIs**:
        - These callbacks are scheduled to run after a specific time interval (**`setTimeout`**) or in response to user interactions or other events (DOM APIs).
        - The execution of these callbacks is dependent on the event loop and timing mechanisms.
    2. **Deferred Functions**:
        - Deferred functions are usually associated with promises or similar constructs.
        - They are executed only after a certain asynchronous operation is completed, like the resolution or rejection of a promise.
        - The purpose is to defer the execution until the relevant data or condition is ready.
    
    In essence, **`setTimeout`**/DOM API callbacks are controlled by time or user-driven events, while deferred functions are linked to the completion of asynchronous operations.
    
Ques. What comes inside microtask queue?
    
    ans: deferred callbacks functions
